# -*- coding: utf-8 -*-
"""microsoft_stock_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASMf_N3WZ3XhAyDgqlty7pMEsW1u55mi
"""

#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import confusion_matrix, accuracy_score

"""**Data Preprocessing**"""

#Importing the data
msft = pd.read_csv('/content/drive/MyDrive/ColabNotebooks/MSFT.csv')
msft

feature_coumns = ['Open', 'High', 'Low', 'Adj Close', 'Volume']
X = msft[feature_coumns]
y = msft['Close']

"""**Data Visualization**


"""

#Data Visualization
plt.plot(msft['Date'], msft['Close'])
plt.xlabel('Date')
plt.ylabel('Close')
plt.title('MSFT Close Price')
plt.show()

sns.histplot(msft['High'], kde=True)
plt.show()
sns.histplot(msft['Low'], kde=True, color='Green')
plt.show()

plt.rcParams.update({'figure.figsize':(10,8), 'figure.dpi':100})
sns.lmplot(data=msft, x='High', y='Low', fit_reg=True)
plt.xlabel('High')
plt.ylabel('Low')
plt.title("Scatter Plot with Linear fit");
plt.show()

#Spliting the data, training the model and predicting
X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.3, random_state=0)
dtree = DecisionTreeRegressor()
dtree.fit(X_train, y_train)
score = dtree.score(X_test, y_test)
y_pred = dtree.predict(X_test)

from sklearn import tree
plt.figure(figsize=(20, 10))
tree.plot_tree(dtree, filled=True, fontsize=10)
plt.show()

#Accuracy metrics for the Regression model
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
metrics=['Mean Squared Error (MSE)', 'Mean Absolute Error (MAE)', 'Root Mean Squared Error (RMSE)', 'R-squared (R2)']
values=[mse, rmse, mae, r2]
metrics_df=pd.DataFrame({'Regression Metrics': metrics, 'Value': values})
metrics_df